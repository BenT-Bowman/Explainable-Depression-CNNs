import numpy as np
from scipy.stats import ttest_ind, ttest_rel

metrics_caew = np.array([
        [0.9268912905276542, 0.818954248366013, 0.6699155295646524, 0.8458035133376708, 0.9106648199445984, 0.8653366583541147, 0.872870249017038, 0.9097402597402597, 0.7734375, 0.7356401384083044, 0.8817135549872123, 0.920584498094028, 0.8112344872632267, 0.9102730819245773, 0.7630208333333334, 0.8713692946058091, 0.8663682864450127, 0.9853596435391471],
        [0.9321004428978956, 0.8289709716036783, 0.7242468850372653, 0.847876418904972, 0.914311390207942, 0.8672489643443202, 0.8899941534889262, 0.9102202754402529, 0.8161274861117365, 0.7517126941320167, 0.8860171158764508, 0.9227704033587875, 0.8112453502081229, 0.9115254544426632, 0.8134313883950218, 0.888553317733156, 0.8700896047661979, 0.9853653398135246],
        [0.9268912905276542, 0.818954248366013, 0.6699155295646524, 0.8458035133376708, 0.9106648199445984, 0.8653366583541147, 0.872870249017038, 0.9097402597402597, 0.7734375, 0.7356401384083044, 0.8817135549872123, 0.920584498094028, 0.8112344872632267, 0.9102730819245773, 0.7630208333333334, 0.8713692946058091, 0.8663682864450127, 0.9853596435391471],
        [0.9267706268876638, 0.8176178215905185, 0.6481655655847636, 0.8455875680741328, 0.9107539387789315, 0.8648983031802773, 0.8714390653184626, 0.9097001583316174, 0.7655943651091501, 0.7342216842263706, 0.8812215733383177, 0.920550995733624, 0.8112312658671884, 0.910218888002766, 0.7530930493828033, 0.870919669555351, 0.8658746160208475, 0.9853588955757537]
    ])

metrics_eegnet = np.array([
        [0.9376986649713922, 0.7705882352941177, 0.5815464587394412, 0.5406636304489265, 0.5858725761772853, 0.82356608478803, 0.8047182175622543, 0.5006493506493507, 0.7649739583333334, 0.4740484429065744, 0.9124040920716112, 0.8837357052096569, 0.8563030698889614, 0.5962288686605982, 0.703125, 0.495850622406639, 0.8593350383631714, 0.9401654996817314],
        [0.9388755496944827, 0.7713237913619313, 0.5898828619364387, 0.5547738006092311, 0.5835426186381097, 0.8273423899330833, 0.8052000537189148, 0.49674024984403903, 0.7649791969548619, 0.4539097383179953, 0.9212961878764372, 0.8882108470160858, 0.8600686574181827, 0.6073783224461502, 0.709902239041312, 0.500837849556089, 0.8685279913628015, 0.9442019556140382],
        [0.9376986649713922, 0.7705882352941177, 0.5815464587394412, 0.5406636304489265, 0.5858725761772853, 0.82356608478803, 0.8047182175622543, 0.5006493506493507, 0.7649739583333334, 0.4740484429065744, 0.9124040920716112, 0.8837357052096569, 0.8563030698889614, 0.5962288686605982, 0.703125, 0.495850622406639, 0.8593350383631714, 0.9401654996817314],
        [0.93761490951793, 0.7704543931755228, 0.5708879745028989, 0.5077215290138349, 0.5806067983303186, 0.8225065370904738, 0.804647751794406, 0.4408523822821162, 0.7649736594821405, 0.4476978466089903, 0.9117848590263048, 0.8832304375854954, 0.8559435719206843, 0.5844363303438561, 0.700709154398757, 0.4955089360772793, 0.8581933436923808, 0.9399524680195694]
    ])

metrics_MLP = np.array(
    [[0.6109345200254291, 0.5058823529411764, 0.5971410006497726, 0.5426154847104749, 0.4092797783933518, 0.6290523690773068, 0.5629095674967235, 0.5246753246753246, 0.6139322916666666, 0.4519031141868512, 0.48657289002557547, 0.6188055908513341, 0.519921619856303, 0.577373211963589, 0.5455729166666666, 0.4073305670816044, 0.59846547314578, 0.5862507956715468],
    [0.6108134108398415, 0.5058928469295987, 0.5971969800637311, 0.5426369974541273, 0.41329821639314956, 0.6288969091675899, 0.5638447770238756, 0.5245412349894538, 0.6139331393771702, 0.4577923293885029, 0.48557611476253665, 0.6189355680882883, 0.5199146825995221, 0.5779892395252141, 0.5457096214671973, 0.4108722691296711, 0.5985800714138766, 0.5865865014255427],
    [0.6109345200254291, 0.5058823529411764, 0.5971410006497726, 0.5426154847104749, 0.4092797783933518, 0.6290523690773068, 0.5629095674967235, 0.5246753246753246, 0.6139322916666666, 0.4519031141868512, 0.48657289002557547, 0.6188055908513341, 0.519921619856303, 0.577373211963589, 0.5455729166666666, 0.4073305670816044, 0.59846547314578, 0.5862507956715468],
    [0.6102044725063965, 0.505879819974413, 0.5971195687224626, 0.5425984463359443, 0.40858356164006776, 0.6289548345927777, 0.561451473915138, 0.5235216220556678, 0.6139324553035617, 0.44819184293322856, 0.4852852592921026, 0.6188456064143101, 0.5199072821943811, 0.5761112649017167, 0.5452328960964262, 0.4074096498776275, 0.5984983091586659, 0.5832987711451981]]
)

metrics_AAEW = np.array(
    [[0.7234583598219961, 0.611764705882353, 0.7095516569200779, 0.556929082628497, 0.4909972299168975, 0.7175810473815462, 0.663826998689384, 0.6357142857142857, 0.6822916666666666, 0.4975778546712803, 0.5703324808184144, 0.7007623888182973, 0.6146309601567603, 0.6657997399219766, 0.671875, 0.4979253112033195, 0.6604859335038363, 0.6823679185232336],
    [0.7541020456223057, 0.6275593070674969, 0.7329101913302982, 0.5598003863000953, 0.4869585928118582, 0.7544927374419719, 0.6966413952948938, 0.6639025020297792, 0.6927914889488861, 0.48619110640348423, 0.5822010489524664, 0.7432990536734024, 0.6404503374411614, 0.6922118603820436, 0.6805128205128206, 0.4879403998086471, 0.7061106947778742, 0.762082753258364],
    [0.7234583598219961, 0.611764705882353, 0.7095516569200779, 0.556929082628497, 0.4909972299168975, 0.7175810473815462, 0.663826998689384, 0.6357142857142857, 0.6822916666666666, 0.4975778546712803, 0.5703324808184144, 0.7007623888182973, 0.6146309601567603, 0.6657997399219766, 0.671875, 0.4979253112033195, 0.6604859335038363, 0.6823679185232336],
    [0.7130457709883193, 0.5988953231231292, 0.7018370866652341, 0.551984096827569, 0.4874440368882042, 0.7032754248390903, 0.649360779101328, 0.6180447351823652, 0.6778173092244827, 0.4807482821911644, 0.5463591540687014, 0.684676467026899, 0.5956668587805514, 0.6532922530655804, 0.6679021497405485, 0.48434586418710757, 0.6376418600177588, 0.6526064294246093]]
)

def avg_metrics_loop(metrics, name):
    print(name)
    for (metric, data) in zip(["Accuracy", "Precision", "Recall", "F1"], metrics):
        print(f"\t Metric: {metric}")
        print(f"\t\tMean: {data.mean()}")
        print(f"\t\tStdDiv: {data.std()}")

def compare(metrics1, metrics2, names):
    print(names)
    for (metric, (data1, data2)) in zip(["Accuracy", "Precision", "Recall", "F1"], zip(metrics1, metrics2)):
        print(metric)
        t_stat, p_value = ttest_ind(data1, data2)
        print(f"\t{t_stat=}, {p_value=}")

avg_metrics_loop(metrics_eegnet, "EEGNet")
avg_metrics_loop(metrics_caew, "caew")

compare(metrics_eegnet, metrics_caew, "EEGNet and CAEW")


avg_metrics_loop(metrics_MLP, "mlp")
avg_metrics_loop(metrics_AAEW, "aaew")

compare(metrics_MLP, metrics_AAEW, "mlp and aaew")

